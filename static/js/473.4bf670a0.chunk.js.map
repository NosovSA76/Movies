{"version":3,"file":"static/js/473.4bf670a0.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.js","servises/getMoviesInformation.js"],"sourcesContent":["import { styled } from \"styled-components\";\n\nexport const CastList = styled.div`\ndisplay: flex;\nflex-wrap: wrap;\ngap: 20px;\n`\n\nexport const CastCard = styled.div`\nwidth: 170px;\nbackground-color: darkgrey;\nborder-radius: 4px;\nborder: .1px solid #80808042 ;\noverflow: hidden;\n`\n\nexport const CastPhoto = styled.img`\nwidth: 170px;\nheight: 255px;\n`","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getMoviesCast } from \"../../servises/getMoviesInformation\";\nimport NoPhoto from \"../../assets/no-photo.png\";\nimport { CastList, CastCard, CastPhoto } from \"./Cast.styled\";\n\nconst Cast = () => {\n  const [MoviesCast, setMoviesCast] = useState([]);\n  const { MoviesID } = useParams();\n\n  console.log(MoviesID);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const data = await getMoviesCast(MoviesID);\n        setMoviesCast(data);\n      } catch (error) {\n        console.log(error.message);\n      }\n    })();\n  }, [MoviesID]);\n\n  return (\n    <CastList>\n      {MoviesCast.map((MoviesCast) => (\n        <CastCard key={MoviesCast.id}>\n          <CastPhoto\n            width={170}\n            src={\n              MoviesCast.profile_path\n                ? `https://image.tmdb.org/t/p/original/${MoviesCast.profile_path}`\n                : NoPhoto\n            }\n            alt=\"\"\n          />\n          <p>Name:{MoviesCast.original_name}</p>\n          <p>Character: {MoviesCast.character}</p>\n        </CastCard>\n      ))}\n    </CastList>\n  );\n};\n\nexport default Cast;\n","import axios from \"axios\";\n\naxios.defaults.baseURL = `https://api.themoviedb.org/3`;\naxios.defaults.params = {\n  api_key: `80849c20aa63241eb028c4e7b7d0f3a8`,\n  include_adult: false,\n};\n\nexport const getPopularMovies = async (page = 1) => {\n  try {\n    const { data } = await axios.get(\"/trending/movie/day\", {\n      params: {\n        page,\n      },\n    });\n    return data;\n  } catch (error) {\n    throw new Error(\"Oops, there is no movies\");\n  }\n};\n\nexport const getMoviesByQuery = async (query) => {\n  try {\n    const urlParam = `/search/movie?query=${query}&`;\n    const { data } = await axios.get(urlParam);\n    return data;\n  } catch (error) {\n    throw new Error(\"Oops, there is no movie\");\n  }\n};\n\nexport const getMoviesDetailsById = async (movieId) => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}`);\n    return data;\n  } catch (error) {\n    throw new Error(\"Oops, there is no movie with that name\");\n  }\n};\n\nexport const getMoviesCast = async (movieId) => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}/credits`);\n    return data.cast;\n  } catch (error) {\n    throw new Error(\"Oops, there is no cast movie\");\n  }\n};\n\nexport const getMoviesReviews = async (movieId) => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}/reviews`);\n    return data.results;\n  } catch (error) {\n    throw new Error(\"Oops, we don`t have any reviews\");\n  }\n};\n"],"names":["CastList","styled","div","_templateObject","_taggedTemplateLiteral","CastCard","_templateObject2","CastPhoto","img","_templateObject3","_useState","useState","_useState2","_slicedToArray","MoviesCast","setMoviesCast","MoviesID","useParams","console","log","useEffect","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","wrap","_context","prev","next","getMoviesCast","sent","t0","message","stop","_jsx","children","map","_jsxs","width","src","profile_path","concat","NoPhoto","alt","original_name","character","id","axios","defaults","baseURL","params","api_key","include_adult","getPopularMovies","_ref","page","_yield$axios$get","_args","arguments","length","undefined","get","abrupt","Error","apply","getMoviesByQuery","_ref2","_callee2","query","urlParam","_yield$axios$get2","_context2","_x","getMoviesDetailsById","_ref3","_callee3","movieId","_yield$axios$get3","_context3","_x2","_ref4","_callee4","_yield$axios$get4","_context4","cast","_x3","getMoviesReviews","_ref5","_callee5","_yield$axios$get5","_context5","results","_x4"],"sourceRoot":""}